// Code generated by MockGen. DO NOT EDIT.
// Source: ../storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	storage "ticket-api/storage"

	gomock "github.com/golang/mock/gomock"
)

// MockTicketOptionStorage is a mock of TicketOptionStorage interface.
type MockTicketOptionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTicketOptionStorageMockRecorder
}

// MockTicketOptionStorageMockRecorder is the mock recorder for MockTicketOptionStorage.
type MockTicketOptionStorageMockRecorder struct {
	mock *MockTicketOptionStorage
}

// NewMockTicketOptionStorage creates a new mock instance.
func NewMockTicketOptionStorage(ctrl *gomock.Controller) *MockTicketOptionStorage {
	mock := &MockTicketOptionStorage{ctrl: ctrl}
	mock.recorder = &MockTicketOptionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketOptionStorage) EXPECT() *MockTicketOptionStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTicketOptionStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTicketOptionStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTicketOptionStorage)(nil).Close))
}

// CreateTicketOption mocks base method.
func (m *MockTicketOptionStorage) CreateTicketOption(ctx context.Context, input *storage.CreateTicketOptionInput) (*storage.TicketOptionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicketOption", ctx, input)
	ret0, _ := ret[0].(*storage.TicketOptionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicketOption indicates an expected call of CreateTicketOption.
func (mr *MockTicketOptionStorageMockRecorder) CreateTicketOption(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicketOption", reflect.TypeOf((*MockTicketOptionStorage)(nil).CreateTicketOption), ctx, input)
}

// GenerateTickets mocks base method.
func (m *MockTicketOptionStorage) GenerateTickets(ctx context.Context, input *storage.GenerateTicketsInput) (*storage.GenerateTicketsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTickets", ctx, input)
	ret0, _ := ret[0].(*storage.GenerateTicketsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTickets indicates an expected call of GenerateTickets.
func (mr *MockTicketOptionStorageMockRecorder) GenerateTickets(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTickets", reflect.TypeOf((*MockTicketOptionStorage)(nil).GenerateTickets), ctx, input)
}

// GetTicketOption mocks base method.
func (m *MockTicketOptionStorage) GetTicketOption(ctx context.Context, ticketOptionId string) (*storage.TicketOptionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketOption", ctx, ticketOptionId)
	ret0, _ := ret[0].(*storage.TicketOptionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketOption indicates an expected call of GetTicketOption.
func (mr *MockTicketOptionStorageMockRecorder) GetTicketOption(ctx, ticketOptionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketOption", reflect.TypeOf((*MockTicketOptionStorage)(nil).GetTicketOption), ctx, ticketOptionId)
}
